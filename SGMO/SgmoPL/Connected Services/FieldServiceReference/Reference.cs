//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOV.SGMO.FieldServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Field", Namespace="http://schemas.datacontract.org/2004/07/SOV")]
    [System.SerializableAttribute()]
    public partial class Field : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SOV.SGMO.FieldServiceReference.EnumFieldFormat FieldFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SOV.Geo.Grid GridField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PredictTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SOV.SGMO.FieldServiceReference.EnumFieldFormat FieldFormat {
            get {
                return this.FieldFormatField;
            }
            set {
                if ((this.FieldFormatField.Equals(value) != true)) {
                    this.FieldFormatField = value;
                    this.RaisePropertyChanged("FieldFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SOV.Geo.Grid Grid {
            get {
                return this.GridField;
            }
            set {
                if ((object.ReferenceEquals(this.GridField, value) != true)) {
                    this.GridField = value;
                    this.RaisePropertyChanged("Grid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PredictTime {
            get {
                return this.PredictTimeField;
            }
            set {
                if ((this.PredictTimeField.Equals(value) != true)) {
                    this.PredictTimeField = value;
                    this.RaisePropertyChanged("PredictTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumFieldFormat", Namespace="http://schemas.datacontract.org/2004/07/SOV")]
    public enum EnumFieldFormat : long {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GRID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XYZ = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FieldServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Open", ReplyAction="http://tempuri.org/IService/OpenResponse")]
        long Open(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Open", ReplyAction="http://tempuri.org/IService/OpenResponse")]
        System.Threading.Tasks.Task<long> OpenAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Close", ReplyAction="http://tempuri.org/IService/CloseResponse")]
        void Close(long hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Close", ReplyAction="http://tempuri.org/IService/CloseResponse")]
        System.Threading.Tasks.Task CloseAsync(long hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseByUserName", ReplyAction="http://tempuri.org/IService/CloseByUserNameResponse")]
        void CloseByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseByUserName", ReplyAction="http://tempuri.org/IService/CloseByUserNameResponse")]
        System.Threading.Tasks.Task CloseByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExtentForecast", ReplyAction="http://tempuri.org/IService/GetExtentForecastResponse")]
        SOV.SGMO.FieldServiceReference.Field[][][] GetExtentForecast(long hSvc, System.DateTime dateIni, double[] leadTimes, int methodId, SOV.SGMO.Varoff[] varoffs, SOV.Geo.GeoRectangle[] grs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExtentForecast", ReplyAction="http://tempuri.org/IService/GetExtentForecastResponse")]
        System.Threading.Tasks.Task<SOV.SGMO.FieldServiceReference.Field[][][]> GetExtentForecastAsync(long hSvc, System.DateTime dateIni, double[] leadTimes, int methodId, SOV.SGMO.Varoff[] varoffs, SOV.Geo.GeoRectangle[] grs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesForecast", ReplyAction="http://tempuri.org/IService/GetSitesForecastResponse")]
        System.Collections.Generic.Dictionary<double, double[]> GetSitesForecast(long hSvc, System.DateTime dateIni, double[] leadTimes, int[] pointCatalogsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesForecast", ReplyAction="http://tempuri.org/IService/GetSitesForecastResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<double, double[]>> GetSitesForecastAsync(long hSvc, System.DateTime dateIni, double[] leadTimes, int[] pointCatalogsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMethods", ReplyAction="http://tempuri.org/IService/GetMethodsResponse")]
        SOV.Amur.Meta.Method[] GetMethods(long hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMethods", ReplyAction="http://tempuri.org/IService/GetMethodsResponse")]
        System.Threading.Tasks.Task<SOV.Amur.Meta.Method[]> GetMethodsAsync(long hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTrackForecast", ReplyAction="http://tempuri.org/IService/GetTrackForecastResponse")]
        System.Collections.Generic.Dictionary<double, double[]> GetTrackForecast(long hSvc, System.DateTime dateIni, SOV.Geo.GeoPoint[] track, int pointMethodId, SOV.SGMO.Varoff[] pointVaroffs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTrackForecast", ReplyAction="http://tempuri.org/IService/GetTrackForecastResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<double, double[]>> GetTrackForecastAsync(long hSvc, System.DateTime dateIni, SOV.Geo.GeoPoint[] track, int pointMethodId, SOV.SGMO.Varoff[] pointVaroffs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : SOV.SGMO.FieldServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<SOV.SGMO.FieldServiceReference.IService>, SOV.SGMO.FieldServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long Open(string userName, string password) {
            return base.Channel.Open(userName, password);
        }
        
        public System.Threading.Tasks.Task<long> OpenAsync(string userName, string password) {
            return base.Channel.OpenAsync(userName, password);
        }
        
        public void Close(long hSvc) {
            base.Channel.Close(hSvc);
        }
        
        public System.Threading.Tasks.Task CloseAsync(long hSvc) {
            return base.Channel.CloseAsync(hSvc);
        }
        
        public void CloseByUserName(string userName) {
            base.Channel.CloseByUserName(userName);
        }
        
        public System.Threading.Tasks.Task CloseByUserNameAsync(string userName) {
            return base.Channel.CloseByUserNameAsync(userName);
        }
        
        public SOV.SGMO.FieldServiceReference.Field[][][] GetExtentForecast(long hSvc, System.DateTime dateIni, double[] leadTimes, int methodId, SOV.SGMO.Varoff[] varoffs, SOV.Geo.GeoRectangle[] grs) {
            return base.Channel.GetExtentForecast(hSvc, dateIni, leadTimes, methodId, varoffs, grs);
        }
        
        public System.Threading.Tasks.Task<SOV.SGMO.FieldServiceReference.Field[][][]> GetExtentForecastAsync(long hSvc, System.DateTime dateIni, double[] leadTimes, int methodId, SOV.SGMO.Varoff[] varoffs, SOV.Geo.GeoRectangle[] grs) {
            return base.Channel.GetExtentForecastAsync(hSvc, dateIni, leadTimes, methodId, varoffs, grs);
        }
        
        public System.Collections.Generic.Dictionary<double, double[]> GetSitesForecast(long hSvc, System.DateTime dateIni, double[] leadTimes, int[] pointCatalogsId) {
            return base.Channel.GetSitesForecast(hSvc, dateIni, leadTimes, pointCatalogsId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<double, double[]>> GetSitesForecastAsync(long hSvc, System.DateTime dateIni, double[] leadTimes, int[] pointCatalogsId) {
            return base.Channel.GetSitesForecastAsync(hSvc, dateIni, leadTimes, pointCatalogsId);
        }
        
        public SOV.Amur.Meta.Method[] GetMethods(long hSvc) {
            return base.Channel.GetMethods(hSvc);
        }
        
        public System.Threading.Tasks.Task<SOV.Amur.Meta.Method[]> GetMethodsAsync(long hSvc) {
            return base.Channel.GetMethodsAsync(hSvc);
        }
        
        public System.Collections.Generic.Dictionary<double, double[]> GetTrackForecast(long hSvc, System.DateTime dateIni, SOV.Geo.GeoPoint[] track, int pointMethodId, SOV.SGMO.Varoff[] pointVaroffs) {
            return base.Channel.GetTrackForecast(hSvc, dateIni, track, pointMethodId, pointVaroffs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<double, double[]>> GetTrackForecastAsync(long hSvc, System.DateTime dateIni, SOV.Geo.GeoPoint[] track, int pointMethodId, SOV.SGMO.Varoff[] pointVaroffs) {
            return base.Channel.GetTrackForecastAsync(hSvc, dateIni, track, pointMethodId, pointVaroffs);
        }
    }
}
